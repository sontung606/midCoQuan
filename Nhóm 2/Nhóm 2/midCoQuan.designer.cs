#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nhóm_2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="midCoQuan")]
	public partial class midCoQuanDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDonVi(DonVi instance);
    partial void UpdateDonVi(DonVi instance);
    partial void DeleteDonVi(DonVi instance);
    partial void InsertBoPhan(BoPhan instance);
    partial void UpdateBoPhan(BoPhan instance);
    partial void DeleteBoPhan(BoPhan instance);
    #endregion
		
		public midCoQuanDataContext() : 
				base(global::Nhóm_2.Properties.Settings.Default.midCoQuanConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public midCoQuanDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public midCoQuanDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public midCoQuanDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public midCoQuanDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DonVi> DonVis
		{
			get
			{
				return this.GetTable<DonVi>();
			}
		}
		
		public System.Data.Linq.Table<BoPhan> BoPhans
		{
			get
			{
				return this.GetTable<BoPhan>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DonVi")]
	public partial class DonVi : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MaDV;
		
		private string _TenDV;
		
		private System.DateTime _NgayTL;
		
		private string _MaBP;
		
		private EntityRef<BoPhan> _BoPhan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaDVChanging(string value);
    partial void OnMaDVChanged();
    partial void OnTenDVChanging(string value);
    partial void OnTenDVChanged();
    partial void OnNgayTLChanging(System.DateTime value);
    partial void OnNgayTLChanged();
    partial void OnMaBPChanging(string value);
    partial void OnMaBPChanged();
    #endregion
		
		public DonVi()
		{
			this._BoPhan = default(EntityRef<BoPhan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaDV", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaDV
		{
			get
			{
				return this._MaDV;
			}
			set
			{
				if ((this._MaDV != value))
				{
					this.OnMaDVChanging(value);
					this.SendPropertyChanging();
					this._MaDV = value;
					this.SendPropertyChanged("MaDV");
					this.OnMaDVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenDV", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TenDV
		{
			get
			{
				return this._TenDV;
			}
			set
			{
				if ((this._TenDV != value))
				{
					this.OnTenDVChanging(value);
					this.SendPropertyChanging();
					this._TenDV = value;
					this.SendPropertyChanged("TenDV");
					this.OnTenDVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgayTL", DbType="DateTime NOT NULL")]
		public System.DateTime NgayTL
		{
			get
			{
				return this._NgayTL;
			}
			set
			{
				if ((this._NgayTL != value))
				{
					this.OnNgayTLChanging(value);
					this.SendPropertyChanging();
					this._NgayTL = value;
					this.SendPropertyChanged("NgayTL");
					this.OnNgayTLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaBP", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string MaBP
		{
			get
			{
				return this._MaBP;
			}
			set
			{
				if ((this._MaBP != value))
				{
					if (this._BoPhan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaBPChanging(value);
					this.SendPropertyChanging();
					this._MaBP = value;
					this.SendPropertyChanged("MaBP");
					this.OnMaBPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BoPhan_DonVi", Storage="_BoPhan", ThisKey="MaBP", OtherKey="MaBP", IsForeignKey=true)]
		public BoPhan BoPhan
		{
			get
			{
				return this._BoPhan.Entity;
			}
			set
			{
				BoPhan previousValue = this._BoPhan.Entity;
				if (((previousValue != value) 
							|| (this._BoPhan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BoPhan.Entity = null;
						previousValue.DonVis.Remove(this);
					}
					this._BoPhan.Entity = value;
					if ((value != null))
					{
						value.DonVis.Add(this);
						this._MaBP = value.MaBP;
					}
					else
					{
						this._MaBP = default(string);
					}
					this.SendPropertyChanged("BoPhan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BoPhan")]
	public partial class BoPhan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MaBP;
		
		private string _TenBP;
		
		private EntitySet<DonVi> _DonVis;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaBPChanging(string value);
    partial void OnMaBPChanged();
    partial void OnTenBPChanging(string value);
    partial void OnTenBPChanged();
    #endregion
		
		public BoPhan()
		{
			this._DonVis = new EntitySet<DonVi>(new Action<DonVi>(this.attach_DonVis), new Action<DonVi>(this.detach_DonVis));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaBP", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaBP
		{
			get
			{
				return this._MaBP;
			}
			set
			{
				if ((this._MaBP != value))
				{
					this.OnMaBPChanging(value);
					this.SendPropertyChanging();
					this._MaBP = value;
					this.SendPropertyChanged("MaBP");
					this.OnMaBPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenBP", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TenBP
		{
			get
			{
				return this._TenBP;
			}
			set
			{
				if ((this._TenBP != value))
				{
					this.OnTenBPChanging(value);
					this.SendPropertyChanging();
					this._TenBP = value;
					this.SendPropertyChanged("TenBP");
					this.OnTenBPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BoPhan_DonVi", Storage="_DonVis", ThisKey="MaBP", OtherKey="MaBP")]
		public EntitySet<DonVi> DonVis
		{
			get
			{
				return this._DonVis;
			}
			set
			{
				this._DonVis.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DonVis(DonVi entity)
		{
			this.SendPropertyChanging();
			entity.BoPhan = this;
		}
		
		private void detach_DonVis(DonVi entity)
		{
			this.SendPropertyChanging();
			entity.BoPhan = null;
		}
	}
}
#pragma warning restore 1591
